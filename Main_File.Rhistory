library(funHDDC)
data <- read.csv(file.choose(), header=T)
data[, c('new_t')]
print(data)
data[, c('new_t')]
data[, c('new_t')]
var1 <- data[, c('new_IS_Podil')]
var1 <- data[, c('new_IS_podil')]
var1
res.uni<-funHDDC(var1,K=2,model="AkBkQkDk",init="kmeans",threshold=0.2)
var1 <- as.list(var1)
res.uni<-funHDDC(var1,K=2,model="AkBkQkDk",init="kmeans",threshold=0.2)
library(fda)
data[, c('new_t')]
feature <- data[, c('new_IS_podil')]
feature <- as.list(feature)
time <- data[,c('new_t')]
time <- as.list(time)
fd = Data2fd(argvals=feature, y= time)
View(var1)
View(time)
res.uni<-funHDDC(fd,K=2,model="AkBkQkDk",init="kmeans",threshold=0.2)
res.uni<-funHDDC(feature,K=2,model="AkBkQkDk",init="kmeans",threshold=0.2)
feature <- as.list(feature)
time <- data[,c('new_t')]
time <- as.list(time)
fd = Data2fd(argvals=feature, y=time)
data[, c('new_t')]
var1<-smooth.basis(argvals=seq(0,1,length.out = 100),y=t(data[,9:15]),fdParobj=basis)$fd
basis<- create.bspline.basis(c(0,1), nbasis=25)
var1<-smooth.basis(argvals=seq(0,1,length.out = 100),y=t(data[,9:15]),fdParobj=basis)$fd
var1<-smooth.basis(argvals=seq(0,1,length.out = 7),y=t(data[,9:15]),fdParobj=basis)$fd
basis<- create.bspline.basis(c(0,1), nbasis=4)
var1<-smooth.basis(argvals=seq(0,1,length.out = 7),y=t(data[,9:15]),fdParobj=basis)$fd
res.uni<-funHDDC(var1,K=3,model="AkBkQkDk",init="kmeans",threshold=0.2)
data("trigo")
data("trigo")
cls = trigo[,101]
basis<- create.bspline.basis(c(0,1), nbasis=25)
var1<-smooth.basis(argvals=seq(0,1,length.out = 100),y=t(trigo[,1:100]),fdParobj=basis)$fd
res.uni<-funHDDC(var1,K=2,model="AkBkQkDk",init="kmeans",threshold=0.2)
table(cls,res.uni$class,dnn=c("True clusters","FunHDDC clusters"))
plot(var1,col=res.uni$class)
library(funHDDC)
library(fda)
df <- read.csv(file.choose(), header=T)
data("trigo")
cls = trigo[,101]
basis<- create.bspline.basis(c(0,1), nbasis=25)
var1<-smooth.basis(argvals=seq(0,1,length.out = 100),y=t(trigo[,1:100]),fdParobj=basis)$fd
res.uni<-funHDDC(var1,K=2,model="AkBkQkDk",init="kmeans",threshold=0.2)
table(cls,res.uni$class,dnn=c("True clusters","FunHDDC clusters"))
plot(var1,col=res.uni$class)
#df <- read.csv(file.choose(), header=T)
data(canWeather)
#df <- read.csv(file.choose(), header=T)
data('canWeather')
#df <- read.csv(file.choose(), header=T)
data("canWeather")
require(gamair);require(mgcv)
#df <- read.csv(file.choose(), header=T)
data("canWeather")
#df <- read.csv(file.choose(), header=T)
data(canWeather)
daybasis65 <- create.fourier.basis(c(0, 365), 65)
daytempfd <- with(CanadianWeather, smooth.basis(
day.5, dailyAv[,,"Temperature.C"],
daybasis65, fdnames=list("Day", "Station", "Deg C"))$fd )
print(CanadianWeather)
df = CanadianWeather
View(df)
View(df)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
daybasis65 <- create.fourier.basis(c(0, 365), nbasis=65, period=365)
daytempfd <- smooth.basis(day.5, CanadianWeather$dailyAv[,,"Temperature.C"], daybasis65,
fdnames=list("Day", "Station", "Deg C"))$fd
dayprecfd<-smooth.basis(day.5, CanadianWeather$dailyAv[,,"Precipitation.mm"], daybasis65,
fdnames=list("Day", "Station", "Mm"))$fd
View(daybasis65)
res.multi<-funHDDC(list(daytempfd,dayprecfd),K=3,model="AkjBkQkDk",init="random",
threshold=0.2)
daybasis65 <- create.fourier.basis(c(0, 365), nbasis=65, period=365)
daytempfd <- smooth.basis(day.5, CanadianWeather$dailyAv[,,"Temperature.C"], daybasis65,
fdnames=list("Day", "Station", "Deg C"))$fd
dayprecfd<-smooth.basis(day.5, CanadianWeather$dailyAv[,,"Precipitation.mm"], daybasis65,
fdnames=list("Day", "Station", "Mm"))$fd
res.multi<-funHDDC(list(daytempfd,dayprecfd),K=3,model="AkjBkQkDk",init="random",
threshold=0.2)
#Graphical representation of groups mean curves
#Temperature
select1<-fd(daytempfd$coefs[,which(res.multi$class==1)],daytempfd$basis)
#Graphical representation of groups mean curves
#Temperature
select1<-fd(daytempfd$coefs[,which(res.multi$class==1)],daytempfd$basis)
select2<-fd(daytempfd$coefs[,which(res.multi$class==2)],daytempfd$basis)
select1<-fd(daytempfd$coefs[,which(res.multi$class==1)],daytempfd$basis)
select3<-fd(daytempfd$coefs[,which(res.multi$class==3)],daytempfd$basis)
plot(mean.fd(select1),col="lightblue",ylim=c(-20,20),lty=1,lwd=3)
lines(mean.fd(select2),col="palegreen2",lty=1,lwd=3)
lines(mean.fd(select3),col="navy",lty=1,lwd=3)
#Precipitation
select1b<-fd(dayprecfd$coefs[,which(res.multi$class==1)],dayprecfd$basis)
select2b<-fd(dayprecfd$coefs[,which(res.multi$class==2)],dayprecfd$basis)
select3b<-fd(dayprecfd$coefs[,which(res.multi$class==3)],dayprecfd$basis)
plot(mean.fd(select1b),col="lightblue",ylim=c(0,5),lty=1,lwd=3)
lines(mean.fd(select2b),col="palegreen2",lty=1,lwd=3)
lines(mean.fd(select3b),col="navy",lty=1,lwd=3)
View(select1)
View(select1)
View(select1b)
View(select1b)
View(select1)
View(select1)
plot(var1,col=res.uni$class)
data("trigo")
cls = trigo[,101]
basis<- create.bspline.basis(c(0,1), nbasis=25)
var1<-smooth.basis(argvals=seq(0,1,length.out = 100),y=t(trigo[,1:100]),fdParobj=basis)$fd
res.uni<-funHDDC(var1,K=2,model="AkBkQkDk",init="kmeans",threshold=0.2)
table(cls,res.uni$class,dnn=c("True clusters","FunHDDC clusters"))
plot(var1,col=res.uni$class)
library(readxl)
install.packages("readxl")
install.packages("tidyverse")
library(funHDDC)
library(fda)
library(readxl)
library(tidyverse)
library(fs)  #file system package
file_path = fs::dir_ls("D:\\Project Python\\Final Data\\01")
file_path = fs::dir_ls("D:\\Project Python\\Final_Data\\01")
file_path = fs::dir_ls("D:\Shrey\IITR\Final_Data\01")
file_path = fs::dir_ls(r"D:\Shrey\IITR\Final_Data\01")
file_path = fs::dir_ls("D:\\Shrey\\IITR\\Final_Data\\01")
file_path
#################### one method to load multiple files ###################
file_content = list()
for (i in seq_along(file_path)){
file_content[[i]]=read_csv(
file = file_path[[i]]
)
}
file_content = set_names(file_content, file_path)
#################### one method to load multiple files ###################
file_content = list()
for (i in seq_along(file_path)){
file_content[[i]]=read_csv(file = file_path[[i]], spec())
}
#################### one method to load multiple files ###################
file_content = list()
for (i in seq_along(file_path)){
file_content[[i]]=read_csv(file = file_path[[i]])
}
#################### one method to load multiple files ###################
file_content = list()
for (i in seq_along(file_path)){
file_content[[i]]=read_csv(file = file_path[[i]], show_col_types = FALS)
}
#################### one method to load multiple files ###################
file_content = list()
for (i in seq_along(file_path)){
file_content[[i]]=read_csv(file = file_path[[i]], show_col_types = FALSE)
}
file_content = set_names(file_content, file_path)
help(spec)
#################### one method to load multiple files ###################
file_content = list()
for (i in seq_along(file_path)){
file_content[[i]]=spec(read_csv(file = file_path[[i]]))
}
#################### one method to load multiple files ###################
file_content = list()
for (i in seq_along(file_path)){
file_content[[i]]=read_csv(file = file_path[[i]])
spec(file_content[[i]])
}
for (i in seq_along(file_path)){
file_content[[i]]=read_csv(file = file_path[[i]])
cols_condense(spec(file_content[[i]]))
}
(file_content, file_path)
file_content = set_names(file_content, file_path)
print(file_content)
#################### one method to load multiple files ###################
file_content = list()
for (i in seq_along(file_path)){
file_content[[i]]=read_csv(file = file_path[[i]], show_col_types = FALSE)
}
file_content = set_names(file_content, file_path)
print(file_content)
print(file_content[0])
print(file_content[1])
print(file_content[2])
time = data.frame(file_content$new_t)
print(time)
time = data.frame(file_content[1]$new_t)
print(time)
time = file_content[1][c(2)]
print(time)
print(file_content[2].data)
print(file_content[2])
print(file_content)
print(file_content[2]$`D:/Shrey/IITR/Final_Data/01/00000000001 2019-02-12 Characteristics eval=1 bf=0 01_oboci_2019-02-12-14-57-08.dat.csv`$new_t)
time = as.list(file_content$`D:/Shrey/IITR/Final_Data/01/00000000001 2019-02-12 Characteristics
eval=1 bf=0 01_oboci_2019-02-12-14-57-08.dat.csv`$new_t)
print(time)
time = file_content$`D:/Shrey/IITR/Final_Data/01/00000000001 2019-02-12 Characteristics
eval=1 bf=0 01_oboci_2019-02-12-14-57-08.dat.csv`$new_t
print(time)
time = file_content$`D:/Shrey/IITR/Final_Data/01/00000000001 2019-02-03 Characteristics eval=1 bf=0 01_oboci_2019-02-03-20-21-24.dat.csv`$new_t
print(time)
2019
2019
time = as.list(file_content$`D:/Shrey/IITR/Final_Data/01/00000000001 2019-02-03 Characteristics
eval=1 bf=0 01_oboci_2019-02-03-20-21-24.dat.csv`$new_t)
print(time)
eval=1 bf=0 01_oboci_2019-02-03-20-21-24.dat.csv`$new_t
eval=1 bf=0 01_oboci_2019-02-03-20-21-24.dat.csv`$new_t
time = file_content$`D:/Shrey/IITR/Final_Data/01/00000000001 2019-02-03 Characteristics
eval=1 bf=0 01_oboci_2019-02-03-20-21-24.dat.csv`$new_t
print(time)
time = as.list(file_content$`D:/Shrey/IITR/Final_Data/01/00000000001 2019-02-03 Characteristics eval=1 bf=0 01_oboci_2019-02-03-20-21-24.dat.csv`$new_t)
print(time)
l
l <- list("Red", "Green", 51.23, 119.1)
l
l <- list("A", "B", 5, 10, FALSE)
length(l)
m<- matrix(1:10, ncol = 2)
m
new_list = as.list(as.data.frame(m))
new_list
names = ('Natsu','Ichigo','Naruto','Mob','Gon','Hinata','Issei')
names = ("Natsu",'Ichigo','Naruto','Mob','Gon','Hinata','Issei')
names = ("Natsu","Ichigo",'Naruto','Mob','Gon','Hinata','Issei')
names = c("Natsu","Ichigo",'Naruto','Mob','Gon','Hinata','Issei')
names = c('Natsu','Ichigo','Naruto','Mob','Gon','Hinata','Issei')
marks = c(10,20,30,40,50,60,70)
df = data.frame(names,marks)
df
source("~/.active-rstudio-document")
new_df = df[4,]
new_df
new_df = df[0:4,]
new_df
